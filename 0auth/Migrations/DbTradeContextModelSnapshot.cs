// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _0auth.Model;

#nullable disable

namespace _0auth.Migrations
{
    [DbContext(typeof(DbTradeContext))]
    partial class DbTradeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("_0auth.Model.Manufacturer", b =>
                {
                    b.Property<int>("IdManufacturer")
                        .HasColumnType("int")
                        .HasColumnName("id_manufacturer");

                    b.Property<string>("NameManufacturer")
                        .HasColumnType("text")
                        .HasColumnName("name_manufacturer");

                    b.HasKey("IdManufacturer")
                        .HasName("PRIMARY");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_order");

                    b.Property<int?>("CodeOrder")
                        .HasColumnType("int")
                        .HasColumnName("code_order");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("delivery_date");

                    b.Property<DateTime?>("DispatchDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dispatch_date");

                    b.Property<int>("IdOrderStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_order_status");

                    b.Property<int>("IdPoint")
                        .HasColumnType("int")
                        .HasColumnName("id_point");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("IdOrder")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPoint" }, "pointID_idx");

                    b.HasIndex(new[] { "IdOrderStatus" }, "status_idx");

                    b.HasIndex(new[] { "IdUser" }, "userID_idx");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.OrderProduct", b =>
                {
                    b.Property<string>("IdOrderProduct")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_order_product");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("id_order");

                    b.Property<string>("ProductArticleNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_article_number")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProductArticleNumber"), "utf8mb3");

                    b.HasKey("IdOrderProduct")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOrder" }, "orderID_idx");

                    b.HasIndex(new[] { "ProductArticleNumber" }, "productArticleNumber_idx");

                    b.ToTable("order_products", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.OrderStatus", b =>
                {
                    b.Property<int>("IdOrderStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_order_status");

                    b.Property<string>("NameOrderStatus")
                        .HasColumnType("text")
                        .HasColumnName("name_order_status");

                    b.HasKey("IdOrderStatus")
                        .HasName("PRIMARY");

                    b.ToTable("order_statuses", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.Point", b =>
                {
                    b.Property<int>("IdPoint")
                        .HasColumnType("int")
                        .HasColumnName("id_point");

                    b.Property<string>("AddressPoint")
                        .HasColumnType("text")
                        .HasColumnName("address_point");

                    b.Property<int?>("PostCode")
                        .HasColumnType("int")
                        .HasColumnName("post_code");

                    b.HasKey("IdPoint")
                        .HasName("PRIMARY");

                    b.ToTable("points", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.Product", b =>
                {
                    b.Property<string>("ProductArticleNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_article_number")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProductArticleNumber"), "utf8mb3");

                    b.Property<decimal>("CostProduct")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("cost_product");

                    b.Property<int?>("CurrentDiscount")
                        .HasColumnType("int")
                        .HasColumnName("current_discount");

                    b.Property<string>("DescriptionProduct")
                        .HasColumnType("text")
                        .HasColumnName("description_product");

                    b.Property<int>("IdManufacturer")
                        .HasColumnType("int")
                        .HasColumnName("id_manufacturer");

                    b.Property<int>("IdProductType")
                        .HasColumnType("int")
                        .HasColumnName("id_product_type");

                    b.Property<int>("IdSupplier")
                        .HasColumnType("int")
                        .HasColumnName("id_supplier");

                    b.Property<int?>("MaxDiscount")
                        .HasColumnType("int")
                        .HasColumnName("max_discount");

                    b.Property<string>("MeasureProduct")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("measure_product");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_product");

                    b.Property<string>("PhotoProduct")
                        .HasColumnType("text")
                        .HasColumnName("photo_product");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("quantity_in_stock");

                    b.Property<string>("StatusProduct")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_product");

                    b.HasKey("ProductArticleNumber")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdManufacturer" }, "manufac_idx");

                    b.HasIndex(new[] { "IdProductType" }, "productType_idx");

                    b.HasIndex(new[] { "IdSupplier" }, "sup_idx");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.ProductType", b =>
                {
                    b.Property<int>("IdProductType")
                        .HasColumnType("int")
                        .HasColumnName("id_product_type");

                    b.Property<string>("NameProductType")
                        .HasColumnType("text")
                        .HasColumnName("name_product_type");

                    b.HasKey("IdProductType")
                        .HasName("PRIMARY");

                    b.ToTable("product_types", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_role");

                    b.HasKey("IdRole")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .HasColumnType("int")
                        .HasColumnName("id_supplier");

                    b.Property<string>("NameSupplier")
                        .HasColumnType("text")
                        .HasColumnName("name_supplier");

                    b.HasKey("IdSupplier")
                        .HasName("PRIMARY");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    b.Property<string>("LoginUser")
                        .HasColumnType("text")
                        .HasColumnName("login_user");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_user");

                    b.Property<string>("PasswordUser")
                        .HasColumnType("text")
                        .HasColumnName("password_user");

                    b.Property<string>("PatronymicUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("patronymic_user");

                    b.Property<string>("SurnameUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("surname_user");

                    b.HasKey("IdUser")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdRole" }, "role_idx");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("_0auth.Model.Order", b =>
                {
                    b.HasOne("_0auth.Model.OrderStatus", "IdOrderStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdOrderStatus")
                        .IsRequired()
                        .HasConstraintName("status");

                    b.HasOne("_0auth.Model.Point", "IdPointNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdPoint")
                        .IsRequired()
                        .HasConstraintName("pointID");

                    b.HasOne("_0auth.Model.User", "IdUserNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("userID");

                    b.Navigation("IdOrderStatusNavigation");

                    b.Navigation("IdPointNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("_0auth.Model.OrderProduct", b =>
                {
                    b.HasOne("_0auth.Model.Order", "IdOrderNavigation")
                        .WithMany("OrderProducts")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("orderID");

                    b.HasOne("_0auth.Model.Product", "ProductArticleNumberNavigation")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductArticleNumber")
                        .IsRequired()
                        .HasConstraintName("productArticleNumber");

                    b.Navigation("IdOrderNavigation");

                    b.Navigation("ProductArticleNumberNavigation");
                });

            modelBuilder.Entity("_0auth.Model.Product", b =>
                {
                    b.HasOne("_0auth.Model.Manufacturer", "IdManufacturerNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdManufacturer")
                        .IsRequired()
                        .HasConstraintName("manufac");

                    b.HasOne("_0auth.Model.ProductType", "IdProductTypeNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdProductType")
                        .IsRequired()
                        .HasConstraintName("productType");

                    b.HasOne("_0auth.Model.Supplier", "IdSupplierNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdSupplier")
                        .IsRequired()
                        .HasConstraintName("sup");

                    b.Navigation("IdManufacturerNavigation");

                    b.Navigation("IdProductTypeNavigation");

                    b.Navigation("IdSupplierNavigation");
                });

            modelBuilder.Entity("_0auth.Model.User", b =>
                {
                    b.HasOne("_0auth.Model.Role", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("role");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("_0auth.Model.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_0auth.Model.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("_0auth.Model.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_0auth.Model.Point", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_0auth.Model.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("_0auth.Model.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_0auth.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("_0auth.Model.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_0auth.Model.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
